// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:meta/meta.dart' as meta;
part 'md.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `get_line_ending`, `to_constructs`, `to_mk_compile`, `to_mk_line_ending`, `to_options`

Future<String> markdow2Html({required String str}) =>
    RustLib.instance.api.crateApiMdMarkdow2Html(str: str);

String markdow2HtmlSync({required String str}) =>
    RustLib.instance.api.crateApiMdMarkdow2HtmlSync(str: str);

Future<String> markdown2HtmlWithOptions(
        {required String str,
        MkCompileOptions? options,
        MkParseOptions? parseOptions}) =>
    RustLib.instance.api.crateApiMdMarkdown2HtmlWithOptions(
        str: str, options: options, parseOptions: parseOptions);

@freezed
@meta.immutable
class MkCompileOptions with _$MkCompileOptions {
  const factory MkCompileOptions({
    required bool allowDangerousHtml,
    required bool allowDangerousProtocol,
    String? gfmFootnoteLabel,
    String? gfmFootnoteLabelTagName,
    String? gfmFootnoteLabelAttributes,
    String? gfmFootnoteBackLabel,
    String? gfmFootnoteClobberPrefix,
    required bool gfmTaskListItemCheckable,
    required bool gfmTagfilter,
    MkLineEnding? defaultLineEnding,
  }) = _MkCompileOptions;
}

@freezed
@meta.immutable
class MkConstructs with _$MkConstructs {
  const factory MkConstructs({
    required bool attention,
    required bool autolink,
    required bool blockQuote,
    required bool characterEscape,
    required bool characterReference,
    required bool codeIndented,
    required bool codeFenced,
    required bool codeText,
    required bool definition,
    required bool frontmatter,
    required bool gfmAutolinkLiteral,
    required bool gfmFootnoteDefinition,
    required bool gfmLabelStartFootnote,
    required bool gfmStrikethrough,
    required bool gfmTable,
    required bool gfmTaskListItem,
    required bool hardBreakEscape,
    required bool hardBreakTrailing,
    required bool headingAtx,
    required bool headingSetext,
    required bool htmlFlow,
    required bool htmlText,
    required bool labelStartImage,
    required bool labelStartLink,
    required bool labelEnd,
    required bool listItem,
    required bool mathFlow,
    required bool mathText,
    required bool mdxEsm,
    required bool mdxExpressionFlow,
    required bool mdxExpressionText,
    required bool mdxJsxFlow,
    required bool mdxJsxText,
    required bool thematicBreak,
  }) = _MkConstructs;
}

enum MkLineEnding {
  carriageReturnLineFeed,
  carriageReturn,
  lineFeed,
  ;
}

@freezed
@meta.immutable
class MkParseOptions with _$MkParseOptions {
  const factory MkParseOptions({
    required MkConstructs constructs,
    required bool gfmStrikethroughSingleTilde,
    required bool mathTextSingleDollar,
  }) = _MkParseOptions;
}
