// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/md.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:meta/meta.dart' as meta;

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0';

  @override
  int get rustContentHash => 1883411571;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'markdown2html',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<String> crateApiMdMarkdow2Html({required String str});

  Future<String> crateApiMdMarkdown2HtmlWithOptions(
      {required String str,
      MkCompileOptions? options,
      MkParseOptions? parseOptions});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<String> crateApiMdMarkdow2Html({required String str}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(str, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMdMarkdow2HtmlConstMeta,
      argValues: [str],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMdMarkdow2HtmlConstMeta => const TaskConstMeta(
        debugName: "markdow2html",
        argNames: ["str"],
      );

  @override
  Future<String> crateApiMdMarkdown2HtmlWithOptions(
      {required String str,
      MkCompileOptions? options,
      MkParseOptions? parseOptions}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(str, serializer);
        sse_encode_opt_box_autoadd_mk_compile_options(options, serializer);
        sse_encode_opt_box_autoadd_mk_parse_options(parseOptions, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiMdMarkdown2HtmlWithOptionsConstMeta,
      argValues: [str, options, parseOptions],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMdMarkdown2HtmlWithOptionsConstMeta =>
      const TaskConstMeta(
        debugName: "markdown2html_with_options",
        argNames: ["str", "options", "parseOptions"],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  MkCompileOptions dco_decode_box_autoadd_mk_compile_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_mk_compile_options(raw);
  }

  @protected
  MkLineEnding dco_decode_box_autoadd_mk_line_ending(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_mk_line_ending(raw);
  }

  @protected
  MkParseOptions dco_decode_box_autoadd_mk_parse_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_mk_parse_options(raw);
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  MkCompileOptions dco_decode_mk_compile_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return MkCompileOptions(
      allowDangerousHtml: dco_decode_bool(arr[0]),
      allowDangerousProtocol: dco_decode_bool(arr[1]),
      gfmFootnoteLabel: dco_decode_opt_String(arr[2]),
      gfmFootnoteLabelTagName: dco_decode_opt_String(arr[3]),
      gfmFootnoteLabelAttributes: dco_decode_opt_String(arr[4]),
      gfmFootnoteBackLabel: dco_decode_opt_String(arr[5]),
      gfmFootnoteClobberPrefix: dco_decode_opt_String(arr[6]),
      gfmTaskListItemCheckable: dco_decode_bool(arr[7]),
      gfmTagfilter: dco_decode_bool(arr[8]),
      defaultLineEnding: dco_decode_opt_box_autoadd_mk_line_ending(arr[9]),
    );
  }

  @protected
  MkConstructs dco_decode_mk_constructs(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 34)
      throw Exception('unexpected arr length: expect 34 but see ${arr.length}');
    return MkConstructs(
      attention: dco_decode_bool(arr[0]),
      autolink: dco_decode_bool(arr[1]),
      blockQuote: dco_decode_bool(arr[2]),
      characterEscape: dco_decode_bool(arr[3]),
      characterReference: dco_decode_bool(arr[4]),
      codeIndented: dco_decode_bool(arr[5]),
      codeFenced: dco_decode_bool(arr[6]),
      codeText: dco_decode_bool(arr[7]),
      definition: dco_decode_bool(arr[8]),
      frontmatter: dco_decode_bool(arr[9]),
      gfmAutolinkLiteral: dco_decode_bool(arr[10]),
      gfmFootnoteDefinition: dco_decode_bool(arr[11]),
      gfmLabelStartFootnote: dco_decode_bool(arr[12]),
      gfmStrikethrough: dco_decode_bool(arr[13]),
      gfmTable: dco_decode_bool(arr[14]),
      gfmTaskListItem: dco_decode_bool(arr[15]),
      hardBreakEscape: dco_decode_bool(arr[16]),
      hardBreakTrailing: dco_decode_bool(arr[17]),
      headingAtx: dco_decode_bool(arr[18]),
      headingSetext: dco_decode_bool(arr[19]),
      htmlFlow: dco_decode_bool(arr[20]),
      htmlText: dco_decode_bool(arr[21]),
      labelStartImage: dco_decode_bool(arr[22]),
      labelStartLink: dco_decode_bool(arr[23]),
      labelEnd: dco_decode_bool(arr[24]),
      listItem: dco_decode_bool(arr[25]),
      mathFlow: dco_decode_bool(arr[26]),
      mathText: dco_decode_bool(arr[27]),
      mdxEsm: dco_decode_bool(arr[28]),
      mdxExpressionFlow: dco_decode_bool(arr[29]),
      mdxExpressionText: dco_decode_bool(arr[30]),
      mdxJsxFlow: dco_decode_bool(arr[31]),
      mdxJsxText: dco_decode_bool(arr[32]),
      thematicBreak: dco_decode_bool(arr[33]),
    );
  }

  @protected
  MkLineEnding dco_decode_mk_line_ending(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MkLineEnding.values[raw as int];
  }

  @protected
  MkParseOptions dco_decode_mk_parse_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return MkParseOptions(
      constructs: dco_decode_mk_constructs(arr[0]),
      gfmStrikethroughSingleTilde: dco_decode_bool(arr[1]),
      mathTextSingleDollar: dco_decode_bool(arr[2]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  MkCompileOptions? dco_decode_opt_box_autoadd_mk_compile_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_mk_compile_options(raw);
  }

  @protected
  MkLineEnding? dco_decode_opt_box_autoadd_mk_line_ending(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_mk_line_ending(raw);
  }

  @protected
  MkParseOptions? dco_decode_opt_box_autoadd_mk_parse_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_mk_parse_options(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  MkCompileOptions sse_decode_box_autoadd_mk_compile_options(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_mk_compile_options(deserializer));
  }

  @protected
  MkLineEnding sse_decode_box_autoadd_mk_line_ending(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_mk_line_ending(deserializer));
  }

  @protected
  MkParseOptions sse_decode_box_autoadd_mk_parse_options(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_mk_parse_options(deserializer));
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  MkCompileOptions sse_decode_mk_compile_options(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_allowDangerousHtml = sse_decode_bool(deserializer);
    var var_allowDangerousProtocol = sse_decode_bool(deserializer);
    var var_gfmFootnoteLabel = sse_decode_opt_String(deserializer);
    var var_gfmFootnoteLabelTagName = sse_decode_opt_String(deserializer);
    var var_gfmFootnoteLabelAttributes = sse_decode_opt_String(deserializer);
    var var_gfmFootnoteBackLabel = sse_decode_opt_String(deserializer);
    var var_gfmFootnoteClobberPrefix = sse_decode_opt_String(deserializer);
    var var_gfmTaskListItemCheckable = sse_decode_bool(deserializer);
    var var_gfmTagfilter = sse_decode_bool(deserializer);
    var var_defaultLineEnding =
        sse_decode_opt_box_autoadd_mk_line_ending(deserializer);
    return MkCompileOptions(
        allowDangerousHtml: var_allowDangerousHtml,
        allowDangerousProtocol: var_allowDangerousProtocol,
        gfmFootnoteLabel: var_gfmFootnoteLabel,
        gfmFootnoteLabelTagName: var_gfmFootnoteLabelTagName,
        gfmFootnoteLabelAttributes: var_gfmFootnoteLabelAttributes,
        gfmFootnoteBackLabel: var_gfmFootnoteBackLabel,
        gfmFootnoteClobberPrefix: var_gfmFootnoteClobberPrefix,
        gfmTaskListItemCheckable: var_gfmTaskListItemCheckable,
        gfmTagfilter: var_gfmTagfilter,
        defaultLineEnding: var_defaultLineEnding);
  }

  @protected
  MkConstructs sse_decode_mk_constructs(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_attention = sse_decode_bool(deserializer);
    var var_autolink = sse_decode_bool(deserializer);
    var var_blockQuote = sse_decode_bool(deserializer);
    var var_characterEscape = sse_decode_bool(deserializer);
    var var_characterReference = sse_decode_bool(deserializer);
    var var_codeIndented = sse_decode_bool(deserializer);
    var var_codeFenced = sse_decode_bool(deserializer);
    var var_codeText = sse_decode_bool(deserializer);
    var var_definition = sse_decode_bool(deserializer);
    var var_frontmatter = sse_decode_bool(deserializer);
    var var_gfmAutolinkLiteral = sse_decode_bool(deserializer);
    var var_gfmFootnoteDefinition = sse_decode_bool(deserializer);
    var var_gfmLabelStartFootnote = sse_decode_bool(deserializer);
    var var_gfmStrikethrough = sse_decode_bool(deserializer);
    var var_gfmTable = sse_decode_bool(deserializer);
    var var_gfmTaskListItem = sse_decode_bool(deserializer);
    var var_hardBreakEscape = sse_decode_bool(deserializer);
    var var_hardBreakTrailing = sse_decode_bool(deserializer);
    var var_headingAtx = sse_decode_bool(deserializer);
    var var_headingSetext = sse_decode_bool(deserializer);
    var var_htmlFlow = sse_decode_bool(deserializer);
    var var_htmlText = sse_decode_bool(deserializer);
    var var_labelStartImage = sse_decode_bool(deserializer);
    var var_labelStartLink = sse_decode_bool(deserializer);
    var var_labelEnd = sse_decode_bool(deserializer);
    var var_listItem = sse_decode_bool(deserializer);
    var var_mathFlow = sse_decode_bool(deserializer);
    var var_mathText = sse_decode_bool(deserializer);
    var var_mdxEsm = sse_decode_bool(deserializer);
    var var_mdxExpressionFlow = sse_decode_bool(deserializer);
    var var_mdxExpressionText = sse_decode_bool(deserializer);
    var var_mdxJsxFlow = sse_decode_bool(deserializer);
    var var_mdxJsxText = sse_decode_bool(deserializer);
    var var_thematicBreak = sse_decode_bool(deserializer);
    return MkConstructs(
        attention: var_attention,
        autolink: var_autolink,
        blockQuote: var_blockQuote,
        characterEscape: var_characterEscape,
        characterReference: var_characterReference,
        codeIndented: var_codeIndented,
        codeFenced: var_codeFenced,
        codeText: var_codeText,
        definition: var_definition,
        frontmatter: var_frontmatter,
        gfmAutolinkLiteral: var_gfmAutolinkLiteral,
        gfmFootnoteDefinition: var_gfmFootnoteDefinition,
        gfmLabelStartFootnote: var_gfmLabelStartFootnote,
        gfmStrikethrough: var_gfmStrikethrough,
        gfmTable: var_gfmTable,
        gfmTaskListItem: var_gfmTaskListItem,
        hardBreakEscape: var_hardBreakEscape,
        hardBreakTrailing: var_hardBreakTrailing,
        headingAtx: var_headingAtx,
        headingSetext: var_headingSetext,
        htmlFlow: var_htmlFlow,
        htmlText: var_htmlText,
        labelStartImage: var_labelStartImage,
        labelStartLink: var_labelStartLink,
        labelEnd: var_labelEnd,
        listItem: var_listItem,
        mathFlow: var_mathFlow,
        mathText: var_mathText,
        mdxEsm: var_mdxEsm,
        mdxExpressionFlow: var_mdxExpressionFlow,
        mdxExpressionText: var_mdxExpressionText,
        mdxJsxFlow: var_mdxJsxFlow,
        mdxJsxText: var_mdxJsxText,
        thematicBreak: var_thematicBreak);
  }

  @protected
  MkLineEnding sse_decode_mk_line_ending(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MkLineEnding.values[inner];
  }

  @protected
  MkParseOptions sse_decode_mk_parse_options(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_constructs = sse_decode_mk_constructs(deserializer);
    var var_gfmStrikethroughSingleTilde = sse_decode_bool(deserializer);
    var var_mathTextSingleDollar = sse_decode_bool(deserializer);
    return MkParseOptions(
        constructs: var_constructs,
        gfmStrikethroughSingleTilde: var_gfmStrikethroughSingleTilde,
        mathTextSingleDollar: var_mathTextSingleDollar);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MkCompileOptions? sse_decode_opt_box_autoadd_mk_compile_options(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_mk_compile_options(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MkLineEnding? sse_decode_opt_box_autoadd_mk_line_ending(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_mk_line_ending(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MkParseOptions? sse_decode_opt_box_autoadd_mk_parse_options(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_mk_parse_options(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_mk_compile_options(
      MkCompileOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_mk_compile_options(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_mk_line_ending(
      MkLineEnding self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_mk_line_ending(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_mk_parse_options(
      MkParseOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_mk_parse_options(self, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_mk_compile_options(
      MkCompileOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.allowDangerousHtml, serializer);
    sse_encode_bool(self.allowDangerousProtocol, serializer);
    sse_encode_opt_String(self.gfmFootnoteLabel, serializer);
    sse_encode_opt_String(self.gfmFootnoteLabelTagName, serializer);
    sse_encode_opt_String(self.gfmFootnoteLabelAttributes, serializer);
    sse_encode_opt_String(self.gfmFootnoteBackLabel, serializer);
    sse_encode_opt_String(self.gfmFootnoteClobberPrefix, serializer);
    sse_encode_bool(self.gfmTaskListItemCheckable, serializer);
    sse_encode_bool(self.gfmTagfilter, serializer);
    sse_encode_opt_box_autoadd_mk_line_ending(
        self.defaultLineEnding, serializer);
  }

  @protected
  void sse_encode_mk_constructs(MkConstructs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.attention, serializer);
    sse_encode_bool(self.autolink, serializer);
    sse_encode_bool(self.blockQuote, serializer);
    sse_encode_bool(self.characterEscape, serializer);
    sse_encode_bool(self.characterReference, serializer);
    sse_encode_bool(self.codeIndented, serializer);
    sse_encode_bool(self.codeFenced, serializer);
    sse_encode_bool(self.codeText, serializer);
    sse_encode_bool(self.definition, serializer);
    sse_encode_bool(self.frontmatter, serializer);
    sse_encode_bool(self.gfmAutolinkLiteral, serializer);
    sse_encode_bool(self.gfmFootnoteDefinition, serializer);
    sse_encode_bool(self.gfmLabelStartFootnote, serializer);
    sse_encode_bool(self.gfmStrikethrough, serializer);
    sse_encode_bool(self.gfmTable, serializer);
    sse_encode_bool(self.gfmTaskListItem, serializer);
    sse_encode_bool(self.hardBreakEscape, serializer);
    sse_encode_bool(self.hardBreakTrailing, serializer);
    sse_encode_bool(self.headingAtx, serializer);
    sse_encode_bool(self.headingSetext, serializer);
    sse_encode_bool(self.htmlFlow, serializer);
    sse_encode_bool(self.htmlText, serializer);
    sse_encode_bool(self.labelStartImage, serializer);
    sse_encode_bool(self.labelStartLink, serializer);
    sse_encode_bool(self.labelEnd, serializer);
    sse_encode_bool(self.listItem, serializer);
    sse_encode_bool(self.mathFlow, serializer);
    sse_encode_bool(self.mathText, serializer);
    sse_encode_bool(self.mdxEsm, serializer);
    sse_encode_bool(self.mdxExpressionFlow, serializer);
    sse_encode_bool(self.mdxExpressionText, serializer);
    sse_encode_bool(self.mdxJsxFlow, serializer);
    sse_encode_bool(self.mdxJsxText, serializer);
    sse_encode_bool(self.thematicBreak, serializer);
  }

  @protected
  void sse_encode_mk_line_ending(MkLineEnding self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_mk_parse_options(
      MkParseOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_mk_constructs(self.constructs, serializer);
    sse_encode_bool(self.gfmStrikethroughSingleTilde, serializer);
    sse_encode_bool(self.mathTextSingleDollar, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_mk_compile_options(
      MkCompileOptions? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_mk_compile_options(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_mk_line_ending(
      MkLineEnding? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_mk_line_ending(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_mk_parse_options(
      MkParseOptions? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_mk_parse_options(self, serializer);
    }
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
