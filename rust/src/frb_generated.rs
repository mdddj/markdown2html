// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.7.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 281527071;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__md__markdow2html_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "markdow2html",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_str = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok =
                            Result::<_, ()>::Ok(crate::api::md::markdow2html(api_str).await)?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__md__markdow2html_sync_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "markdow2html_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_str = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::md::markdow2html_sync(api_str).await)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__md__markdown2html_with_options_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "markdown2html_with_options",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_str = <String>::sse_decode(&mut deserializer);
            let api_options =
                <Option<crate::api::md::MkCompileOptions>>::sse_decode(&mut deserializer);
            let api_parse_options =
                <Option<crate::api::md::MkParseOptions>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok = crate::api::md::markdown2html_with_options(
                            api_str,
                            api_options,
                            api_parse_options,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::md::MkCompileOptions {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_allowDangerousHtml = <bool>::sse_decode(deserializer);
        let mut var_allowDangerousProtocol = <bool>::sse_decode(deserializer);
        let mut var_gfmFootnoteLabel = <Option<String>>::sse_decode(deserializer);
        let mut var_gfmFootnoteLabelTagName = <Option<String>>::sse_decode(deserializer);
        let mut var_gfmFootnoteLabelAttributes = <Option<String>>::sse_decode(deserializer);
        let mut var_gfmFootnoteBackLabel = <Option<String>>::sse_decode(deserializer);
        let mut var_gfmFootnoteClobberPrefix = <Option<String>>::sse_decode(deserializer);
        let mut var_gfmTaskListItemCheckable = <bool>::sse_decode(deserializer);
        let mut var_gfmTagfilter = <bool>::sse_decode(deserializer);
        let mut var_defaultLineEnding =
            <Option<crate::api::md::MkLineEnding>>::sse_decode(deserializer);
        return crate::api::md::MkCompileOptions {
            allow_dangerous_html: var_allowDangerousHtml,
            allow_dangerous_protocol: var_allowDangerousProtocol,
            gfm_footnote_label: var_gfmFootnoteLabel,
            gfm_footnote_label_tag_name: var_gfmFootnoteLabelTagName,
            gfm_footnote_label_attributes: var_gfmFootnoteLabelAttributes,
            gfm_footnote_back_label: var_gfmFootnoteBackLabel,
            gfm_footnote_clobber_prefix: var_gfmFootnoteClobberPrefix,
            gfm_task_list_item_checkable: var_gfmTaskListItemCheckable,
            gfm_tagfilter: var_gfmTagfilter,
            default_line_ending: var_defaultLineEnding,
        };
    }
}

impl SseDecode for crate::api::md::MkConstructs {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_attention = <bool>::sse_decode(deserializer);
        let mut var_autolink = <bool>::sse_decode(deserializer);
        let mut var_blockQuote = <bool>::sse_decode(deserializer);
        let mut var_characterEscape = <bool>::sse_decode(deserializer);
        let mut var_characterReference = <bool>::sse_decode(deserializer);
        let mut var_codeIndented = <bool>::sse_decode(deserializer);
        let mut var_codeFenced = <bool>::sse_decode(deserializer);
        let mut var_codeText = <bool>::sse_decode(deserializer);
        let mut var_definition = <bool>::sse_decode(deserializer);
        let mut var_frontmatter = <bool>::sse_decode(deserializer);
        let mut var_gfmAutolinkLiteral = <bool>::sse_decode(deserializer);
        let mut var_gfmFootnoteDefinition = <bool>::sse_decode(deserializer);
        let mut var_gfmLabelStartFootnote = <bool>::sse_decode(deserializer);
        let mut var_gfmStrikethrough = <bool>::sse_decode(deserializer);
        let mut var_gfmTable = <bool>::sse_decode(deserializer);
        let mut var_gfmTaskListItem = <bool>::sse_decode(deserializer);
        let mut var_hardBreakEscape = <bool>::sse_decode(deserializer);
        let mut var_hardBreakTrailing = <bool>::sse_decode(deserializer);
        let mut var_headingAtx = <bool>::sse_decode(deserializer);
        let mut var_headingSetext = <bool>::sse_decode(deserializer);
        let mut var_htmlFlow = <bool>::sse_decode(deserializer);
        let mut var_htmlText = <bool>::sse_decode(deserializer);
        let mut var_labelStartImage = <bool>::sse_decode(deserializer);
        let mut var_labelStartLink = <bool>::sse_decode(deserializer);
        let mut var_labelEnd = <bool>::sse_decode(deserializer);
        let mut var_listItem = <bool>::sse_decode(deserializer);
        let mut var_mathFlow = <bool>::sse_decode(deserializer);
        let mut var_mathText = <bool>::sse_decode(deserializer);
        let mut var_mdxEsm = <bool>::sse_decode(deserializer);
        let mut var_mdxExpressionFlow = <bool>::sse_decode(deserializer);
        let mut var_mdxExpressionText = <bool>::sse_decode(deserializer);
        let mut var_mdxJsxFlow = <bool>::sse_decode(deserializer);
        let mut var_mdxJsxText = <bool>::sse_decode(deserializer);
        let mut var_thematicBreak = <bool>::sse_decode(deserializer);
        return crate::api::md::MkConstructs {
            attention: var_attention,
            autolink: var_autolink,
            block_quote: var_blockQuote,
            character_escape: var_characterEscape,
            character_reference: var_characterReference,
            code_indented: var_codeIndented,
            code_fenced: var_codeFenced,
            code_text: var_codeText,
            definition: var_definition,
            frontmatter: var_frontmatter,
            gfm_autolink_literal: var_gfmAutolinkLiteral,
            gfm_footnote_definition: var_gfmFootnoteDefinition,
            gfm_label_start_footnote: var_gfmLabelStartFootnote,
            gfm_strikethrough: var_gfmStrikethrough,
            gfm_table: var_gfmTable,
            gfm_task_list_item: var_gfmTaskListItem,
            hard_break_escape: var_hardBreakEscape,
            hard_break_trailing: var_hardBreakTrailing,
            heading_atx: var_headingAtx,
            heading_setext: var_headingSetext,
            html_flow: var_htmlFlow,
            html_text: var_htmlText,
            label_start_image: var_labelStartImage,
            label_start_link: var_labelStartLink,
            label_end: var_labelEnd,
            list_item: var_listItem,
            math_flow: var_mathFlow,
            math_text: var_mathText,
            mdx_esm: var_mdxEsm,
            mdx_expression_flow: var_mdxExpressionFlow,
            mdx_expression_text: var_mdxExpressionText,
            mdx_jsx_flow: var_mdxJsxFlow,
            mdx_jsx_text: var_mdxJsxText,
            thematic_break: var_thematicBreak,
        };
    }
}

impl SseDecode for crate::api::md::MkLineEnding {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::md::MkLineEnding::CarriageReturnLineFeed,
            1 => crate::api::md::MkLineEnding::CarriageReturn,
            2 => crate::api::md::MkLineEnding::LineFeed,
            _ => unreachable!("Invalid variant for MkLineEnding: {}", inner),
        };
    }
}

impl SseDecode for crate::api::md::MkParseOptions {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_constructs = <crate::api::md::MkConstructs>::sse_decode(deserializer);
        let mut var_gfmStrikethroughSingleTilde = <bool>::sse_decode(deserializer);
        let mut var_mathTextSingleDollar = <bool>::sse_decode(deserializer);
        return crate::api::md::MkParseOptions {
            constructs: var_constructs,
            gfm_strikethrough_single_tilde: var_gfmStrikethroughSingleTilde,
            math_text_single_dollar: var_mathTextSingleDollar,
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::md::MkCompileOptions> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::md::MkCompileOptions>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::md::MkLineEnding> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::md::MkLineEnding>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::md::MkParseOptions> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::md::MkParseOptions>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__md__markdow2html_impl(port, ptr, rust_vec_len, data_len),
        3 => {
            wire__crate__api__md__markdown2html_with_options_impl(port, ptr, rust_vec_len, data_len)
        }
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        2 => wire__crate__api__md__markdow2html_sync_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::md::MkCompileOptions {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.allow_dangerous_html.into_into_dart().into_dart(),
            self.allow_dangerous_protocol.into_into_dart().into_dart(),
            self.gfm_footnote_label.into_into_dart().into_dart(),
            self.gfm_footnote_label_tag_name
                .into_into_dart()
                .into_dart(),
            self.gfm_footnote_label_attributes
                .into_into_dart()
                .into_dart(),
            self.gfm_footnote_back_label.into_into_dart().into_dart(),
            self.gfm_footnote_clobber_prefix
                .into_into_dart()
                .into_dart(),
            self.gfm_task_list_item_checkable
                .into_into_dart()
                .into_dart(),
            self.gfm_tagfilter.into_into_dart().into_dart(),
            self.default_line_ending.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::md::MkCompileOptions
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::md::MkCompileOptions>
    for crate::api::md::MkCompileOptions
{
    fn into_into_dart(self) -> crate::api::md::MkCompileOptions {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::md::MkConstructs {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.attention.into_into_dart().into_dart(),
            self.autolink.into_into_dart().into_dart(),
            self.block_quote.into_into_dart().into_dart(),
            self.character_escape.into_into_dart().into_dart(),
            self.character_reference.into_into_dart().into_dart(),
            self.code_indented.into_into_dart().into_dart(),
            self.code_fenced.into_into_dart().into_dart(),
            self.code_text.into_into_dart().into_dart(),
            self.definition.into_into_dart().into_dart(),
            self.frontmatter.into_into_dart().into_dart(),
            self.gfm_autolink_literal.into_into_dart().into_dart(),
            self.gfm_footnote_definition.into_into_dart().into_dart(),
            self.gfm_label_start_footnote.into_into_dart().into_dart(),
            self.gfm_strikethrough.into_into_dart().into_dart(),
            self.gfm_table.into_into_dart().into_dart(),
            self.gfm_task_list_item.into_into_dart().into_dart(),
            self.hard_break_escape.into_into_dart().into_dart(),
            self.hard_break_trailing.into_into_dart().into_dart(),
            self.heading_atx.into_into_dart().into_dart(),
            self.heading_setext.into_into_dart().into_dart(),
            self.html_flow.into_into_dart().into_dart(),
            self.html_text.into_into_dart().into_dart(),
            self.label_start_image.into_into_dart().into_dart(),
            self.label_start_link.into_into_dart().into_dart(),
            self.label_end.into_into_dart().into_dart(),
            self.list_item.into_into_dart().into_dart(),
            self.math_flow.into_into_dart().into_dart(),
            self.math_text.into_into_dart().into_dart(),
            self.mdx_esm.into_into_dart().into_dart(),
            self.mdx_expression_flow.into_into_dart().into_dart(),
            self.mdx_expression_text.into_into_dart().into_dart(),
            self.mdx_jsx_flow.into_into_dart().into_dart(),
            self.mdx_jsx_text.into_into_dart().into_dart(),
            self.thematic_break.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::md::MkConstructs {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::md::MkConstructs>
    for crate::api::md::MkConstructs
{
    fn into_into_dart(self) -> crate::api::md::MkConstructs {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::md::MkLineEnding {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::CarriageReturnLineFeed => 0.into_dart(),
            Self::CarriageReturn => 1.into_dart(),
            Self::LineFeed => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::md::MkLineEnding {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::md::MkLineEnding>
    for crate::api::md::MkLineEnding
{
    fn into_into_dart(self) -> crate::api::md::MkLineEnding {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::md::MkParseOptions {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.constructs.into_into_dart().into_dart(),
            self.gfm_strikethrough_single_tilde
                .into_into_dart()
                .into_dart(),
            self.math_text_single_dollar.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::md::MkParseOptions
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::md::MkParseOptions>
    for crate::api::md::MkParseOptions
{
    fn into_into_dart(self) -> crate::api::md::MkParseOptions {
        self
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::md::MkCompileOptions {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.allow_dangerous_html, serializer);
        <bool>::sse_encode(self.allow_dangerous_protocol, serializer);
        <Option<String>>::sse_encode(self.gfm_footnote_label, serializer);
        <Option<String>>::sse_encode(self.gfm_footnote_label_tag_name, serializer);
        <Option<String>>::sse_encode(self.gfm_footnote_label_attributes, serializer);
        <Option<String>>::sse_encode(self.gfm_footnote_back_label, serializer);
        <Option<String>>::sse_encode(self.gfm_footnote_clobber_prefix, serializer);
        <bool>::sse_encode(self.gfm_task_list_item_checkable, serializer);
        <bool>::sse_encode(self.gfm_tagfilter, serializer);
        <Option<crate::api::md::MkLineEnding>>::sse_encode(self.default_line_ending, serializer);
    }
}

impl SseEncode for crate::api::md::MkConstructs {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.attention, serializer);
        <bool>::sse_encode(self.autolink, serializer);
        <bool>::sse_encode(self.block_quote, serializer);
        <bool>::sse_encode(self.character_escape, serializer);
        <bool>::sse_encode(self.character_reference, serializer);
        <bool>::sse_encode(self.code_indented, serializer);
        <bool>::sse_encode(self.code_fenced, serializer);
        <bool>::sse_encode(self.code_text, serializer);
        <bool>::sse_encode(self.definition, serializer);
        <bool>::sse_encode(self.frontmatter, serializer);
        <bool>::sse_encode(self.gfm_autolink_literal, serializer);
        <bool>::sse_encode(self.gfm_footnote_definition, serializer);
        <bool>::sse_encode(self.gfm_label_start_footnote, serializer);
        <bool>::sse_encode(self.gfm_strikethrough, serializer);
        <bool>::sse_encode(self.gfm_table, serializer);
        <bool>::sse_encode(self.gfm_task_list_item, serializer);
        <bool>::sse_encode(self.hard_break_escape, serializer);
        <bool>::sse_encode(self.hard_break_trailing, serializer);
        <bool>::sse_encode(self.heading_atx, serializer);
        <bool>::sse_encode(self.heading_setext, serializer);
        <bool>::sse_encode(self.html_flow, serializer);
        <bool>::sse_encode(self.html_text, serializer);
        <bool>::sse_encode(self.label_start_image, serializer);
        <bool>::sse_encode(self.label_start_link, serializer);
        <bool>::sse_encode(self.label_end, serializer);
        <bool>::sse_encode(self.list_item, serializer);
        <bool>::sse_encode(self.math_flow, serializer);
        <bool>::sse_encode(self.math_text, serializer);
        <bool>::sse_encode(self.mdx_esm, serializer);
        <bool>::sse_encode(self.mdx_expression_flow, serializer);
        <bool>::sse_encode(self.mdx_expression_text, serializer);
        <bool>::sse_encode(self.mdx_jsx_flow, serializer);
        <bool>::sse_encode(self.mdx_jsx_text, serializer);
        <bool>::sse_encode(self.thematic_break, serializer);
    }
}

impl SseEncode for crate::api::md::MkLineEnding {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::md::MkLineEnding::CarriageReturnLineFeed => 0,
                crate::api::md::MkLineEnding::CarriageReturn => 1,
                crate::api::md::MkLineEnding::LineFeed => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::md::MkParseOptions {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::md::MkConstructs>::sse_encode(self.constructs, serializer);
        <bool>::sse_encode(self.gfm_strikethrough_single_tilde, serializer);
        <bool>::sse_encode(self.math_text_single_dollar, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::md::MkCompileOptions> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::md::MkCompileOptions>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::md::MkLineEnding> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::md::MkLineEnding>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::md::MkParseOptions> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::md::MkParseOptions>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.7.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.7.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
